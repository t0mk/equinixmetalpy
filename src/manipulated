{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "support@equinixmetal.com",
      "name": "Equinix Metal API Team"
    },
    "description": "desc",
    "license": {
      "name": "Equinix Metal",
      "url": "https://metal.equinix.com/legal/"
    },
    "termsOfService": "https://metal.equinix.com/legal/",
    "title": "Metal API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.equinix.com/metal/v1"
    }
  ],
  "security": [
    {
      "x_auth_token": []
    }
  ],
  "tags": [
    {
      "description": "Device Management. Check out the product docs to learn more about [Server Devices](https://metal.equinix.com/developers/docs/servers/).\n",
      "externalDocs": {
        "url": "https://metal.equinix.com/developers/docs/deploy/on-demand/"
      },
      "name": "Devices"
    },
    {
      "description": "Project Management. Check out the product docs to learn more about [Projects](https://metal.equinix.com/developers/docs/accounts/projects/).\n",
      "externalDocs": {
        "url": "https://metal.equinix.com/developers/docs/accounts/projects/"
      },
      "name": "Projects"
    }
  ],
  "paths": {
    "/devices/{id}": {
      "delete": {
        "description": "Deletes a device and deprovisions it in our datacenter.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "description": "Device UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Force the deletion of the device, by detaching any storage volume still active.",
            "in": "query",
            "name": "force_delete",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unprocessable entity"
          }
        },
        "summary": "Delete the device",
        "tags": [
          "Devices"
        ]
      },
      "get": {
        "description": "Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.\n                         State value can be one of: active inactive queued or provisioning",
        "operationId": "findDeviceById",
        "parameters": [
          {
            "description": "Device UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Nested attributes to include. Included objects will return their full\nattributes. Attribute names can be dotted (up to 3 levels) to included deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Nested attributes to exclude. Excluded objects will return only the href\nattribute. Attribute names can be dotted (up to 3 levels) to exclude deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device"
                }
              }
            },
            "description": "ok"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          }
        },
        "summary": "Retrieve a device",
        "tags": [
          "Devices"
        ]
      },
      "put": {
        "description": "Updates the device.",
        "operationId": "updateDevice",
        "parameters": [
          {
            "description": "Device UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceUpdateInput"
              }
            }
          },
          "description": "Facility to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device"
                }
              }
            },
            "description": "ok"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unprocessable entity"
          }
        },
        "summary": "Update the device",
        "tags": [
          "Devices"
        ]
      }
    },
    "/projects": {
      "get": {
        "description": "Returns a collection of projects that the current user is a member of.",
        "operationId": "findProjects",
        "parameters": [
          {
            "description": "Nested attributes to include. Included objects will return their full\nattributes. Attribute names can be dotted (up to 3 levels) to included deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Nested attributes to exclude. Excluded objects will return only the href\nattribute. Attribute names can be dotted (up to 3 levels) to exclude deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Page to return",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "maximum": 100000,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Items returned per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/ProjectList"
                }
              }
            },
            "description": "ok"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          }
        },
        "summary": "Retrieve all projects",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Creates a new project for the user default organization. If the user don't have an organization, a new one will be created.",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/ProjectCreateFromRootInput"
              }
            }
          },
          "description": "Project to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Project"
                }
              }
            },
            "description": "created"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unprocessable entity"
          }
        },
        "summary": "Create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{id}": {
      "delete": {
        "description": "Deletes the project.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "description": "Project UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          }
        },
        "summary": "Delete the project",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "description": "Returns a single project if the user has access",
        "operationId": "findProjectById",
        "parameters": [
          {
            "description": "Project UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Nested attributes to include. Included objects will return their full\nattributes. Attribute names can be dotted (up to 3 levels) to included deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Nested attributes to exclude. Excluded objects will return only the href\nattribute. Attribute names can be dotted (up to 3 levels) to exclude deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Project"
                }
              }
            },
            "description": "ok"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          }
        },
        "summary": "Retrieve a project",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "description": "Updates the project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "description": "Project UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/ProjectUpdateInput"
              }
            }
          },
          "description": "Project to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Project"
                }
              }
            },
            "description": "ok"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unprocessable entity"
          }
        },
        "summary": "Update the project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{id}/devices": {
      "get": {
        "description": "Provides a collection of devices for a given project.",
        "operationId": "findProjectDevices",
        "parameters": [
          {
            "description": "Project UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by device facility",
            "in": "query",
            "name": "facility",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by partial hostname",
            "in": "query",
            "name": "hostname",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter only reserved instances",
            "in": "query",
            "name": "reserved",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Filter by device tag",
            "in": "query",
            "name": "tag",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by instance type (ondemand,spot,reserved)",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Nested attributes to include. Included objects will return their full\nattributes. Attribute names can be dotted (up to 3 levels) to included deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Nested attributes to exclude. Excluded objects will return only the href\nattribute. Attribute names can be dotted (up to 3 levels) to exclude deeply\nnested objects.",
            "explode": false,
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Page to return",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "maximum": 100000,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Items returned per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceList"
                }
              }
            },
            "description": "ok"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          }
        },
        "summary": "Retrieve all devices of a project",
        "tags": [
          "Devices"
        ]
      },
      "post": {
        "description": "Creates a new device and provisions it in the specified location.\n\nDevice type-specific options are accepted.  For example, `baremetal` devices accept `operating_system`, `hostname`, and `plan`. These parameters may not be accepted for other device types. The default device type is `baremetal`.",
        "operationId": "createDevice",
        "parameters": [
          {
            "description": "Project UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/createDevice_request"
              }
            }
          },
          "description": "Device to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device"
                }
              }
            },
            "description": "created"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Error"
                }
              }
            },
            "description": "unprocessable entity"
          }
        },
        "summary": "Create a device",
        "tags": [
          "Devices"
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "Page": {
        "description": "Page to return",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "default": 1,
          "format": "int32",
          "maximum": 100000,
          "minimum": 1,
          "type": "integer"
        },
        "style": "form",
        "x-ms-parameter-location": "method"
      },
      "PerPage": {
        "description": "Items returned per page",
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "default": 10,
          "format": "int32",
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        },
        "style": "form",
        "x-ms-parameter-location": "method"
      },
      "Include": {
        "description": "Nested attributes to include. Included objects will return their full\nattributes. Attribute names can be dotted (up to 3 levels) to included deeply\nnested objects.",
        "explode": false,
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-ms-parameter-location": "method"
      },
      "Exclude": {
        "description": "Nested attributes to exclude. Excluded objects will return only the href\nattribute. Attribute names can be dotted (up to 3 levels) to exclude deeply\nnested objects.",
        "explode": false,
        "in": "query",
        "name": "exclude",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-ms-parameter-location": "method"
      }
    },
    "requestBodies": {},
    "schemas": {
      "ProjectUpdateInput": {
        "example": {
          "payment_method_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "name": "name",
          "backend_transfer_enabled": true,
          "customdata": "{}"
        },
        "properties": {
          "backend_transfer_enabled": {
            "type": "boolean"
          },
          "customdata": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "payment_method_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Project": {
        "example": {
          "devices": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "volumes": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "created_at": "2000-01-23T04:56:07.000Z",
          "memberships": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "bgp_config": {
            "href": "href"
          },
          "max_devices": "{}",
          "ssh_keys": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "updated_at": "2000-01-23T04:56:07.000Z",
          "invitations": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "members": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "name": "name",
          "network_status": "{}",
          "customdata": "{}",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "payment_method": {
            "href": "href"
          }
        },
        "properties": {
          "bgp_config": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "customdata": {
            "type": "object"
          },
          "devices": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "invitations": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "max_devices": {
            "type": "object"
          },
          "members": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "memberships": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "network_status": {
            "type": "object"
          },
          "payment_method": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "ssh_keys": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "volumes": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "createDevice_request": {
        "oneOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceCreateInMetroInput"
          },
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceCreateInFacilityInput"
          }
        ]
      },
      "Error": {
        "description": "Error responses are included with 4xx and 5xx HTTP responses from the API service. Either \"error\" or \"errors\" will be set.",
        "properties": {
          "error": {
            "description": "A description of the error that caused the request to fail.",
            "type": "string"
          },
          "errors": {
            "description": "A list of errors that contributed to the request failing.",
            "items": {
              "description": "An error message that contributed to the request failing.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProjectList": {
        "example": {
          "projects": [
            {
              "devices": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "volumes": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "created_at": "2000-01-23T04:56:07.000Z",
              "memberships": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "bgp_config": {
                "href": "href"
              },
              "max_devices": "{}",
              "ssh_keys": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "updated_at": "2000-01-23T04:56:07.000Z",
              "invitations": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "members": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "name": "name",
              "network_status": "{}",
              "customdata": "{}",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "payment_method": {
                "href": "href"
              }
            },
            {
              "devices": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "volumes": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "created_at": "2000-01-23T04:56:07.000Z",
              "memberships": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "bgp_config": {
                "href": "href"
              },
              "max_devices": "{}",
              "ssh_keys": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "updated_at": "2000-01-23T04:56:07.000Z",
              "invitations": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "members": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "name": "name",
              "network_status": "{}",
              "customdata": "{}",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "payment_method": {
                "href": "href"
              }
            }
          ],
          "meta": {
            "next": {
              "href": "href"
            },
            "total": 0,
            "last": {
              "href": "href"
            },
            "previous": {
              "href": "href"
            },
            "self": {
              "href": "href"
            },
            "first": {
              "href": "href"
            }
          }
        },
        "properties": {
          "meta": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Meta"
          },
          "projects": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Project"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Device": {
        "example": {
          "ip_addresses": [
            {
              "address": "address",
              "parent_block": {
                "netmask": "netmask",
                "cidr": 5,
                "href": "href",
                "network": "network"
              },
              "created_at": "2000-01-23T04:56:07.000Z",
              "enabled": true,
              "manageable": true,
              "network": "network",
              "address_family": 6,
              "public": true,
              "management": true,
              "netmask": "netmask",
              "metro": null,
              "cidr": 1,
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "global_ip": true,
              "gateway": "gateway",
              "assigned_to": {
                "href": "href"
              }
            },
            {
              "address": "address",
              "parent_block": {
                "netmask": "netmask",
                "cidr": 5,
                "href": "href",
                "network": "network"
              },
              "created_at": "2000-01-23T04:56:07.000Z",
              "enabled": true,
              "manageable": true,
              "network": "network",
              "address_family": 6,
              "public": true,
              "management": true,
              "netmask": "netmask",
              "metro": null,
              "cidr": 1,
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "global_ip": true,
              "gateway": "gateway",
              "assigned_to": {
                "href": "href"
              }
            }
          ],
          "iqn": "iqn",
          "created_at": "2000-01-23T04:56:07.000Z",
          "description": "description",
          "project": null,
          "switch_uuid": "switch_uuid",
          "bonding_mode": 0,
          "provisioning_events": [
            {
              "interpolated": "interpolated",
              "relationships": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "created_at": "2000-01-23T04:56:07.000Z",
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "state": "state",
              "body": "body",
              "type": "type"
            },
            {
              "interpolated": "interpolated",
              "relationships": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "created_at": "2000-01-23T04:56:07.000Z",
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "state": "state",
              "body": "body",
              "type": "type"
            }
          ],
          "network_ports": [
            {
              "native_virtual_network": {
                "vxlan": 5,
                "metal_gateways": [
                  {
                    "gateway_address": "10.1.2.1/27",
                    "updated_at": "2000-01-23T04:56:07.000Z",
                    "vlan": 1001,
                    "created_at": "2000-01-23T04:56:07.000Z",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "state": "ready"
                  },
                  {
                    "gateway_address": "10.1.2.1/27",
                    "updated_at": "2000-01-23T04:56:07.000Z",
                    "vlan": 1001,
                    "created_at": "2000-01-23T04:56:07.000Z",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "state": "ready"
                  }
                ],
                "metro_code": "metro_code",
                "instances": [
                  {
                    "href": "href"
                  },
                  {
                    "href": "href"
                  }
                ],
                "metro": {
                  "href": "href"
                },
                "description": "description",
                "href": "href",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "facility": {
                  "href": "href"
                },
                "assigned_to_virtual_circuit": true,
                "assigned_to": {
                  "href": "href"
                }
              },
              "disbond_operation_supported": true,
              "data": {
                "bonded": true,
                "mac": "mac"
              },
              "name": "bond0",
              "virtual_networks": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "type": "NetworkPort",
              "network_type": "layer2-bonded",
              "bond": {
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              }
            },
            {
              "native_virtual_network": {
                "vxlan": 5,
                "metal_gateways": [
                  {
                    "gateway_address": "10.1.2.1/27",
                    "updated_at": "2000-01-23T04:56:07.000Z",
                    "vlan": 1001,
                    "created_at": "2000-01-23T04:56:07.000Z",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "state": "ready"
                  },
                  {
                    "gateway_address": "10.1.2.1/27",
                    "updated_at": "2000-01-23T04:56:07.000Z",
                    "vlan": 1001,
                    "created_at": "2000-01-23T04:56:07.000Z",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "state": "ready"
                  }
                ],
                "metro_code": "metro_code",
                "instances": [
                  {
                    "href": "href"
                  },
                  {
                    "href": "href"
                  }
                ],
                "metro": {
                  "href": "href"
                },
                "description": "description",
                "href": "href",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "facility": {
                  "href": "href"
                },
                "assigned_to_virtual_circuit": true,
                "assigned_to": {
                  "href": "href"
                }
              },
              "disbond_operation_supported": true,
              "data": {
                "bonded": true,
                "mac": "mac"
              },
              "name": "bond0",
              "virtual_networks": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "type": "NetworkPort",
              "network_type": "layer2-bonded",
              "bond": {
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              }
            }
          ],
          "userdata": "userdata",
          "hostname": "hostname",
          "updated_at": "2000-01-23T04:56:07.000Z",
          "operating_system": {
            "distro": "distro",
            "preinstallable": true,
            "licensed": true,
            "name": "name",
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "provisionable_on": [
              "provisionable_on",
              "provisionable_on"
            ],
            "version": "version",
            "pricing": "{}",
            "slug": "slug"
          },
          "billing_cycle": "billing_cycle",
          "customdata": "{}",
          "href": "href",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "state": "active",
          "locked": true,
          "spot_price_max": 3.6160767,
          "plan": {
            "legacy": true,
            "line": "baremetal",
            "available_in_metros": [
              {
                "price": {
                  "hour": 1.23
                },
                "href": "href"
              },
              {
                "price": {
                  "hour": 1.23
                },
                "href": "href"
              }
            ],
            "description": "description",
            "available_in": [
              {
                "price": {
                  "hour": 1.23
                },
                "href": "href"
              },
              {
                "price": {
                  "hour": 1.23
                },
                "href": "href"
              }
            ],
            "type": "standard",
            "specs": {
              "features": {
                "txt": true,
                "uefi": true,
                "raid": true
              },
              "cpus": [
                {
                  "count": 2,
                  "type": "type"
                },
                {
                  "count": 2,
                  "type": "type"
                }
              ],
              "drives": [
                {
                  "size": "3.84TB",
                  "count": 7,
                  "type": "HDD",
                  "category": "boot"
                },
                {
                  "size": "3.84TB",
                  "count": 7,
                  "type": "HDD",
                  "category": "boot"
                }
              ],
              "nics": [
                {
                  "count": 2,
                  "type": "1Gbps"
                },
                {
                  "count": 2,
                  "type": "1Gbps"
                }
              ]
            },
            "deployment_types": [
              "on_demand",
              "on_demand"
            ],
            "name": "name",
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "class": "m3.large.x86",
            "pricing": "{}",
            "slug": "m3.large.x86"
          },
          "provisioning_percentage": 9.301444,
          "image_url": "image_url",
          "root_password": "root_password",
          "volumes": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "project_lite": null,
          "short_id": "short_id",
          "termination_time": "2000-01-23T04:56:07.000Z",
          "created_by": null,
          "tags": [
            "tags",
            "tags"
          ],
          "hardware_reservation": {
            "href": "href"
          },
          "spot_instance": true,
          "ssh_keys": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "metro": null,
          "always_pxe": true,
          "ipxe_script_url": "ipxe_script_url",
          "facility": {
            "features": [
              "baremetal",
              "backend_transfer",
              "global_ipv4"
            ],
            "address": {
              "country": "country",
              "address": "address",
              "address2": "address2",
              "city": "city",
              "coordinates": {
                "latitude": "latitude",
                "longitude": "longitude"
              },
              "state": "state",
              "zip_code": "zip_code"
            },
            "code": "code",
            "ip_ranges": [
              "2604:1380::/36",
              "147.75.192.0/21"
            ],
            "metro": null,
            "name": "name",
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "actions": [
            {
              "name": "name",
              "type": "type"
            },
            {
              "name": "name",
              "type": "type"
            }
          ],
          "user": "user"
        },
        "properties": {
          "always_pxe": {
            "type": "boolean"
          },
          "billing_cycle": {
            "type": "string"
          },
          "bonding_mode": {
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device_created_by"
          },
          "customdata": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "facility": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Facility"
          },
          "hardware_reservation": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "hostname": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "ip_addresses": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/IPAssignment"
            },
            "type": "array"
          },
          "ipxe_script_url": {
            "type": "string"
          },
          "iqn": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "metro": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device_metro"
          },
          "network_ports": {
            "description": "By default, servers at Equinix Metal are configured in a “bonded” mode using LACP (Link Aggregation Control Protocol). Each 2-NIC server is configured with a single bond (namely bond0) with both interfaces eth0 and eth1 as members of the bond in a default Layer 3 mode. Some device plans may have a different number of ports and bonds available.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Port"
            },
            "type": "array"
          },
          "operating_system": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/OperatingSystem"
          },
          "actions": {
            "description": "Actions supported by the device instance.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device_actions_inner"
            },
            "type": "array"
          },
          "plan": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan"
          },
          "project": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device_project"
          },
          "project_lite": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device_project_lite"
          },
          "provisioning_events": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Event"
            },
            "type": "array"
          },
          "provisioning_percentage": {
            "description": "Only visible while device provisioning",
            "format": "float",
            "type": "number"
          },
          "root_password": {
            "description": "Root password is automatically generated when server is provisioned and it is removed after 24 hours",
            "type": "string"
          },
          "short_id": {
            "type": "string"
          },
          "spot_instance": {
            "description": "Whether or not the device is a spot instance.",
            "type": "boolean"
          },
          "spot_price_max": {
            "description": "The maximum price per hour you are willing to pay to keep this spot\ninstance.  If you are outbid, the termination will be set allowing two\nminutes before shutdown.",
            "format": "float",
            "type": "number"
          },
          "ssh_keys": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "state": {
            "enum": [
              "active",
              "deleted",
              "deprovisioning",
              "failed",
              "inactive",
              "queued",
              "reinstalling",
              "post_provisioning",
              "powering_on",
              "powering_off",
              "provisioning"
            ],
            "type": "string"
          },
          "switch_uuid": {
            "description": "Switch short id. This can be used to determine if two devices are\nconnected to the same switch, for example.",
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "termination_time": {
            "description": "When the device will be terminated. This is commonly set in advance for\nephemeral spot market instances but this field may also be set with\non-demand and reservation instances to automatically delete the resource\nat a given time. The termination time can also be used to release a\nhardware reservation instance at a given time, keeping the reservation\nopen for other uses.  On a spot market device, the termination time will\nbe set automatically when outbid.",
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "userdata": {
            "type": "string"
          },
          "volumes": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceUpdateInput": {
        "example": {
          "userdata": "userdata",
          "hostname": "hostname",
          "spot_instance": true,
          "network_frozen": true,
          "description": "description",
          "always_pxe": true,
          "billing_cycle": "billing_cycle",
          "customdata": "{}",
          "ipxe_script_url": "ipxe_script_url",
          "locked": true,
          "tags": [
            "tags",
            "tags"
          ]
        },
        "properties": {
          "always_pxe": {
            "type": "boolean"
          },
          "billing_cycle": {
            "type": "string"
          },
          "customdata": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "ipxe_script_url": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "network_frozen": {
            "description": "If true, this instance can not be converted to a different network type.",
            "type": "boolean"
          },
          "spot_instance": {
            "description": "Can be set to false to convert a spot-market instance to on-demand.",
            "externalDocs": {
              "url": "https://metal.equinix.com/developers/docs/deploy/spot-market/#converting-a-spot-market-server-to-on-demand"
            },
            "type": "boolean"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userdata": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceList": {
        "example": {
          "devices": [
            {
              "ip_addresses": [
                {
                  "address": "address",
                  "parent_block": {
                    "netmask": "netmask",
                    "cidr": 5,
                    "href": "href",
                    "network": "network"
                  },
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "enabled": true,
                  "manageable": true,
                  "network": "network",
                  "address_family": 6,
                  "public": true,
                  "management": true,
                  "netmask": "netmask",
                  "metro": null,
                  "cidr": 1,
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "global_ip": true,
                  "gateway": "gateway",
                  "assigned_to": {
                    "href": "href"
                  }
                },
                {
                  "address": "address",
                  "parent_block": {
                    "netmask": "netmask",
                    "cidr": 5,
                    "href": "href",
                    "network": "network"
                  },
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "enabled": true,
                  "manageable": true,
                  "network": "network",
                  "address_family": 6,
                  "public": true,
                  "management": true,
                  "netmask": "netmask",
                  "metro": null,
                  "cidr": 1,
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "global_ip": true,
                  "gateway": "gateway",
                  "assigned_to": {
                    "href": "href"
                  }
                }
              ],
              "iqn": "iqn",
              "created_at": "2000-01-23T04:56:07.000Z",
              "description": "description",
              "project": null,
              "switch_uuid": "switch_uuid",
              "bonding_mode": 0,
              "provisioning_events": [
                {
                  "interpolated": "interpolated",
                  "relationships": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "state": "state",
                  "body": "body",
                  "type": "type"
                },
                {
                  "interpolated": "interpolated",
                  "relationships": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "state": "state",
                  "body": "body",
                  "type": "type"
                }
              ],
              "network_ports": [
                {
                  "native_virtual_network": {
                    "vxlan": 5,
                    "metal_gateways": [
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      },
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      }
                    ],
                    "metro_code": "metro_code",
                    "instances": [
                      {
                        "href": "href"
                      },
                      {
                        "href": "href"
                      }
                    ],
                    "metro": {
                      "href": "href"
                    },
                    "description": "description",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "facility": {
                      "href": "href"
                    },
                    "assigned_to_virtual_circuit": true,
                    "assigned_to": {
                      "href": "href"
                    }
                  },
                  "disbond_operation_supported": true,
                  "data": {
                    "bonded": true,
                    "mac": "mac"
                  },
                  "name": "bond0",
                  "virtual_networks": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "type": "NetworkPort",
                  "network_type": "layer2-bonded",
                  "bond": {
                    "name": "name",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                  }
                },
                {
                  "native_virtual_network": {
                    "vxlan": 5,
                    "metal_gateways": [
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      },
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      }
                    ],
                    "metro_code": "metro_code",
                    "instances": [
                      {
                        "href": "href"
                      },
                      {
                        "href": "href"
                      }
                    ],
                    "metro": {
                      "href": "href"
                    },
                    "description": "description",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "facility": {
                      "href": "href"
                    },
                    "assigned_to_virtual_circuit": true,
                    "assigned_to": {
                      "href": "href"
                    }
                  },
                  "disbond_operation_supported": true,
                  "data": {
                    "bonded": true,
                    "mac": "mac"
                  },
                  "name": "bond0",
                  "virtual_networks": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "type": "NetworkPort",
                  "network_type": "layer2-bonded",
                  "bond": {
                    "name": "name",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                  }
                }
              ],
              "userdata": "userdata",
              "hostname": "hostname",
              "updated_at": "2000-01-23T04:56:07.000Z",
              "operating_system": {
                "distro": "distro",
                "preinstallable": true,
                "licensed": true,
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "provisionable_on": [
                  "provisionable_on",
                  "provisionable_on"
                ],
                "version": "version",
                "pricing": "{}",
                "slug": "slug"
              },
              "billing_cycle": "billing_cycle",
              "customdata": "{}",
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "state": "active",
              "locked": true,
              "spot_price_max": 3.6160767,
              "plan": {
                "legacy": true,
                "line": "baremetal",
                "available_in_metros": [
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  },
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  }
                ],
                "description": "description",
                "available_in": [
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  },
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  }
                ],
                "type": "standard",
                "specs": {
                  "features": {
                    "txt": true,
                    "uefi": true,
                    "raid": true
                  },
                  "cpus": [
                    {
                      "count": 2,
                      "type": "type"
                    },
                    {
                      "count": 2,
                      "type": "type"
                    }
                  ],
                  "drives": [
                    {
                      "size": "3.84TB",
                      "count": 7,
                      "type": "HDD",
                      "category": "boot"
                    },
                    {
                      "size": "3.84TB",
                      "count": 7,
                      "type": "HDD",
                      "category": "boot"
                    }
                  ],
                  "nics": [
                    {
                      "count": 2,
                      "type": "1Gbps"
                    },
                    {
                      "count": 2,
                      "type": "1Gbps"
                    }
                  ]
                },
                "deployment_types": [
                  "on_demand",
                  "on_demand"
                ],
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "class": "m3.large.x86",
                "pricing": "{}",
                "slug": "m3.large.x86"
              },
              "provisioning_percentage": 9.301444,
              "image_url": "image_url",
              "root_password": "root_password",
              "volumes": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "project_lite": null,
              "short_id": "short_id",
              "termination_time": "2000-01-23T04:56:07.000Z",
              "created_by": null,
              "tags": [
                "tags",
                "tags"
              ],
              "hardware_reservation": {
                "href": "href"
              },
              "spot_instance": true,
              "ssh_keys": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "metro": null,
              "always_pxe": true,
              "ipxe_script_url": "ipxe_script_url",
              "facility": {
                "features": [
                  "baremetal",
                  "backend_transfer",
                  "global_ipv4"
                ],
                "address": {
                  "country": "country",
                  "address": "address",
                  "address2": "address2",
                  "city": "city",
                  "coordinates": {
                    "latitude": "latitude",
                    "longitude": "longitude"
                  },
                  "state": "state",
                  "zip_code": "zip_code"
                },
                "code": "code",
                "ip_ranges": [
                  "2604:1380::/36",
                  "147.75.192.0/21"
                ],
                "metro": null,
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              },
              "actions": [
                {
                  "name": "name",
                  "type": "type"
                },
                {
                  "name": "name",
                  "type": "type"
                }
              ],
              "user": "user"
            },
            {
              "ip_addresses": [
                {
                  "address": "address",
                  "parent_block": {
                    "netmask": "netmask",
                    "cidr": 5,
                    "href": "href",
                    "network": "network"
                  },
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "enabled": true,
                  "manageable": true,
                  "network": "network",
                  "address_family": 6,
                  "public": true,
                  "management": true,
                  "netmask": "netmask",
                  "metro": null,
                  "cidr": 1,
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "global_ip": true,
                  "gateway": "gateway",
                  "assigned_to": {
                    "href": "href"
                  }
                },
                {
                  "address": "address",
                  "parent_block": {
                    "netmask": "netmask",
                    "cidr": 5,
                    "href": "href",
                    "network": "network"
                  },
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "enabled": true,
                  "manageable": true,
                  "network": "network",
                  "address_family": 6,
                  "public": true,
                  "management": true,
                  "netmask": "netmask",
                  "metro": null,
                  "cidr": 1,
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "global_ip": true,
                  "gateway": "gateway",
                  "assigned_to": {
                    "href": "href"
                  }
                }
              ],
              "iqn": "iqn",
              "created_at": "2000-01-23T04:56:07.000Z",
              "description": "description",
              "project": null,
              "switch_uuid": "switch_uuid",
              "bonding_mode": 0,
              "provisioning_events": [
                {
                  "interpolated": "interpolated",
                  "relationships": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "state": "state",
                  "body": "body",
                  "type": "type"
                },
                {
                  "interpolated": "interpolated",
                  "relationships": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "created_at": "2000-01-23T04:56:07.000Z",
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "state": "state",
                  "body": "body",
                  "type": "type"
                }
              ],
              "network_ports": [
                {
                  "native_virtual_network": {
                    "vxlan": 5,
                    "metal_gateways": [
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      },
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      }
                    ],
                    "metro_code": "metro_code",
                    "instances": [
                      {
                        "href": "href"
                      },
                      {
                        "href": "href"
                      }
                    ],
                    "metro": {
                      "href": "href"
                    },
                    "description": "description",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "facility": {
                      "href": "href"
                    },
                    "assigned_to_virtual_circuit": true,
                    "assigned_to": {
                      "href": "href"
                    }
                  },
                  "disbond_operation_supported": true,
                  "data": {
                    "bonded": true,
                    "mac": "mac"
                  },
                  "name": "bond0",
                  "virtual_networks": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "type": "NetworkPort",
                  "network_type": "layer2-bonded",
                  "bond": {
                    "name": "name",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                  }
                },
                {
                  "native_virtual_network": {
                    "vxlan": 5,
                    "metal_gateways": [
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      },
                      {
                        "gateway_address": "10.1.2.1/27",
                        "updated_at": "2000-01-23T04:56:07.000Z",
                        "vlan": 1001,
                        "created_at": "2000-01-23T04:56:07.000Z",
                        "href": "href",
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "state": "ready"
                      }
                    ],
                    "metro_code": "metro_code",
                    "instances": [
                      {
                        "href": "href"
                      },
                      {
                        "href": "href"
                      }
                    ],
                    "metro": {
                      "href": "href"
                    },
                    "description": "description",
                    "href": "href",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "facility": {
                      "href": "href"
                    },
                    "assigned_to_virtual_circuit": true,
                    "assigned_to": {
                      "href": "href"
                    }
                  },
                  "disbond_operation_supported": true,
                  "data": {
                    "bonded": true,
                    "mac": "mac"
                  },
                  "name": "bond0",
                  "virtual_networks": [
                    {
                      "href": "href"
                    },
                    {
                      "href": "href"
                    }
                  ],
                  "href": "href",
                  "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "type": "NetworkPort",
                  "network_type": "layer2-bonded",
                  "bond": {
                    "name": "name",
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                  }
                }
              ],
              "userdata": "userdata",
              "hostname": "hostname",
              "updated_at": "2000-01-23T04:56:07.000Z",
              "operating_system": {
                "distro": "distro",
                "preinstallable": true,
                "licensed": true,
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "provisionable_on": [
                  "provisionable_on",
                  "provisionable_on"
                ],
                "version": "version",
                "pricing": "{}",
                "slug": "slug"
              },
              "billing_cycle": "billing_cycle",
              "customdata": "{}",
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "state": "active",
              "locked": true,
              "spot_price_max": 3.6160767,
              "plan": {
                "legacy": true,
                "line": "baremetal",
                "available_in_metros": [
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  },
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  }
                ],
                "description": "description",
                "available_in": [
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  },
                  {
                    "price": {
                      "hour": 1.23
                    },
                    "href": "href"
                  }
                ],
                "type": "standard",
                "specs": {
                  "features": {
                    "txt": true,
                    "uefi": true,
                    "raid": true
                  },
                  "cpus": [
                    {
                      "count": 2,
                      "type": "type"
                    },
                    {
                      "count": 2,
                      "type": "type"
                    }
                  ],
                  "drives": [
                    {
                      "size": "3.84TB",
                      "count": 7,
                      "type": "HDD",
                      "category": "boot"
                    },
                    {
                      "size": "3.84TB",
                      "count": 7,
                      "type": "HDD",
                      "category": "boot"
                    }
                  ],
                  "nics": [
                    {
                      "count": 2,
                      "type": "1Gbps"
                    },
                    {
                      "count": 2,
                      "type": "1Gbps"
                    }
                  ]
                },
                "deployment_types": [
                  "on_demand",
                  "on_demand"
                ],
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "class": "m3.large.x86",
                "pricing": "{}",
                "slug": "m3.large.x86"
              },
              "provisioning_percentage": 9.301444,
              "image_url": "image_url",
              "root_password": "root_password",
              "volumes": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "project_lite": null,
              "short_id": "short_id",
              "termination_time": "2000-01-23T04:56:07.000Z",
              "created_by": null,
              "tags": [
                "tags",
                "tags"
              ],
              "hardware_reservation": {
                "href": "href"
              },
              "spot_instance": true,
              "ssh_keys": [
                {
                  "href": "href"
                },
                {
                  "href": "href"
                }
              ],
              "metro": null,
              "always_pxe": true,
              "ipxe_script_url": "ipxe_script_url",
              "facility": {
                "features": [
                  "baremetal",
                  "backend_transfer",
                  "global_ipv4"
                ],
                "address": {
                  "country": "country",
                  "address": "address",
                  "address2": "address2",
                  "city": "city",
                  "coordinates": {
                    "latitude": "latitude",
                    "longitude": "longitude"
                  },
                  "state": "state",
                  "zip_code": "zip_code"
                },
                "code": "code",
                "ip_ranges": [
                  "2604:1380::/36",
                  "147.75.192.0/21"
                ],
                "metro": null,
                "name": "name",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              },
              "actions": [
                {
                  "name": "name",
                  "type": "type"
                },
                {
                  "name": "name",
                  "type": "type"
                }
              ],
              "user": "user"
            }
          ],
          "meta": {
            "next": {
              "href": "href"
            },
            "total": 0,
            "last": {
              "href": "href"
            },
            "previous": {
              "href": "href"
            },
            "self": {
              "href": "href"
            },
            "first": {
              "href": "href"
            }
          }
        },
        "properties": {
          "devices": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Meta"
          }
        },
        "type": "object"
      },
      "ProjectCreateFromRootInput": {
        "example": {
          "payment_method_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "organization_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "name": "name",
          "customdata": "{}"
        },
        "properties": {
          "customdata": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "format": "uuid",
            "type": "string"
          },
          "payment_method_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DeviceCreateInMetroInput": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/MetroInput"
          },
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceCreateInput"
          }
        ]
      },
      "Device_created_by": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/UserLite"
          },
          {
            "description": "The user that created the device.",
            "type": "object"
          }
        ]
      },
      "OperatingSystem": {
        "example": {
          "distro": "distro",
          "preinstallable": true,
          "licensed": true,
          "name": "name",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "provisionable_on": [
            "provisionable_on",
            "provisionable_on"
          ],
          "version": "version",
          "pricing": "{}",
          "slug": "slug"
        },
        "properties": {
          "distro": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "licensed": {
            "description": "Licenced OS is priced according to pricing property",
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "preinstallable": {
            "description": "Servers can be already preinstalled with OS in order to shorten provision time.",
            "type": "boolean"
          },
          "pricing": {
            "description": "This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)",
            "type": "object"
          },
          "provisionable_on": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "slug": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IPAssignment": {
        "example": {
          "address": "address",
          "parent_block": {
            "netmask": "netmask",
            "cidr": 5,
            "href": "href",
            "network": "network"
          },
          "created_at": "2000-01-23T04:56:07.000Z",
          "enabled": true,
          "manageable": true,
          "network": "network",
          "address_family": 6,
          "public": true,
          "management": true,
          "netmask": "netmask",
          "metro": null,
          "cidr": 1,
          "href": "href",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "global_ip": true,
          "gateway": "gateway",
          "assigned_to": {
            "href": "href"
          }
        },
        "properties": {
          "address": {
            "type": "string"
          },
          "address_family": {
            "type": "integer"
          },
          "assigned_to": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "cidr": {
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "gateway": {
            "type": "string"
          },
          "global_ip": {
            "type": "boolean"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "manageable": {
            "type": "boolean"
          },
          "management": {
            "type": "boolean"
          },
          "metro": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/IPAssignment_metro"
          },
          "netmask": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "parent_block": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/ParentBlock"
          },
          "public": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Device_project": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          {
            "description": "Full version of project object when included",
            "type": "object"
          }
        ]
      },
      "Meta": {
        "example": {
          "next": {
            "href": "href"
          },
          "total": 0,
          "last": {
            "href": "href"
          },
          "previous": {
            "href": "href"
          },
          "self": {
            "href": "href"
          },
          "first": {
            "href": "href"
          }
        },
        "properties": {
          "first": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "last": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "next": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "previous": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "self": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Port": {
        "description": "Port is a hardware port associated with a reserved or instantiated hardware device.",
        "example": {
          "native_virtual_network": {
            "vxlan": 5,
            "metal_gateways": [
              {
                "gateway_address": "10.1.2.1/27",
                "updated_at": "2000-01-23T04:56:07.000Z",
                "vlan": 1001,
                "created_at": "2000-01-23T04:56:07.000Z",
                "href": "href",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "state": "ready"
              },
              {
                "gateway_address": "10.1.2.1/27",
                "updated_at": "2000-01-23T04:56:07.000Z",
                "vlan": 1001,
                "created_at": "2000-01-23T04:56:07.000Z",
                "href": "href",
                "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "state": "ready"
              }
            ],
            "metro_code": "metro_code",
            "instances": [
              {
                "href": "href"
              },
              {
                "href": "href"
              }
            ],
            "metro": {
              "href": "href"
            },
            "description": "description",
            "href": "href",
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "facility": {
              "href": "href"
            },
            "assigned_to_virtual_circuit": true,
            "assigned_to": {
              "href": "href"
            }
          },
          "disbond_operation_supported": true,
          "data": {
            "bonded": true,
            "mac": "mac"
          },
          "name": "bond0",
          "virtual_networks": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "href": "href",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type": "NetworkPort",
          "network_type": "layer2-bonded",
          "bond": {
            "name": "name",
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          }
        },
        "properties": {
          "bond": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/BondPortData"
          },
          "data": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/PortData"
          },
          "disbond_operation_supported": {
            "description": "Indicates whether or not the bond can be broken on the port (when applicable).",
            "type": "boolean"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "example": "bond0",
            "type": "string"
          },
          "type": {
            "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports",
            "enum": [
              "NetworkPort",
              "NetworkBondPort"
            ],
            "type": "string"
          },
          "network_type": {
            "description": "Composite network type of the bond",
            "enum": [
              "layer2-bonded",
              "layer2-individual",
              "layer3",
              "hybrid",
              "hybrid-bonded"
            ],
            "type": "string"
          },
          "native_virtual_network": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/VirtualNetwork"
          },
          "virtual_networks": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Device_project_lite": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          {
            "description": "Lite version of project object when included",
            "type": "object"
          }
        ]
      },
      "Device_metro": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Metro"
          },
          {
            "description": "The metro the facility is in",
            "type": "object"
          }
        ]
      },
      "DeviceCreateInFacilityInput": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/FacilityInput"
          },
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceCreateInput"
          }
        ]
      },
      "Device_actions_inner": {
        "example": {
          "name": "name",
          "type": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Event": {
        "example": {
          "interpolated": "interpolated",
          "relationships": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "created_at": "2000-01-23T04:56:07.000Z",
          "href": "href",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "state": "state",
          "body": "body",
          "type": "type"
        },
        "properties": {
          "body": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "interpolated": {
            "type": "string"
          },
          "relationships": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "state": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Facility": {
        "example": {
          "features": [
            "baremetal",
            "backend_transfer",
            "global_ipv4"
          ],
          "address": {
            "country": "country",
            "address": "address",
            "address2": "address2",
            "city": "city",
            "coordinates": {
              "latitude": "latitude",
              "longitude": "longitude"
            },
            "state": "state",
            "zip_code": "zip_code"
          },
          "code": "code",
          "ip_ranges": [
            "2604:1380::/36",
            "147.75.192.0/21"
          ],
          "metro": null,
          "name": "name",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        },
        "properties": {
          "address": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Address"
          },
          "code": {
            "type": "string"
          },
          "features": {
            "example": [
              "baremetal",
              "backend_transfer",
              "global_ipv4"
            ],
            "items": {
              "enum": [
                "baremetal",
                "backend_transfer",
                "layer_2",
                "global_ipv4",
                "ibx"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "ip_ranges": {
            "description": "IP ranges registered in facility. Can be used for GeoIP location",
            "example": [
              "2604:1380::/36",
              "147.75.192.0/21"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metro": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Device_metro"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Href": {
        "example": {
          "href": "href"
        },
        "properties": {
          "href": {
            "type": "string"
          }
        },
        "required": [
          "href"
        ],
        "type": "object"
      },
      "Plan": {
        "example": {
          "legacy": true,
          "line": "baremetal",
          "available_in_metros": [
            {
              "price": {
                "hour": 1.23
              },
              "href": "href"
            },
            {
              "price": {
                "hour": 1.23
              },
              "href": "href"
            }
          ],
          "description": "description",
          "available_in": [
            {
              "price": {
                "hour": 1.23
              },
              "href": "href"
            },
            {
              "price": {
                "hour": 1.23
              },
              "href": "href"
            }
          ],
          "type": "standard",
          "specs": {
            "features": {
              "txt": true,
              "uefi": true,
              "raid": true
            },
            "cpus": [
              {
                "count": 2,
                "type": "type"
              },
              {
                "count": 2,
                "type": "type"
              }
            ],
            "drives": [
              {
                "size": "3.84TB",
                "count": 7,
                "type": "HDD",
                "category": "boot"
              },
              {
                "size": "3.84TB",
                "count": 7,
                "type": "HDD",
                "category": "boot"
              }
            ],
            "nics": [
              {
                "count": 2,
                "type": "1Gbps"
              },
              {
                "count": 2,
                "type": "1Gbps"
              }
            ]
          },
          "deployment_types": [
            "on_demand",
            "on_demand"
          ],
          "name": "name",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "class": "m3.large.x86",
          "pricing": "{}",
          "slug": "m3.large.x86"
        },
        "properties": {
          "available_in": {
            "description": "Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_available_in_inner"
            },
            "type": "array"
          },
          "available_in_metros": {
            "description": "Shows which metros the plan is available in, and the metro-based price if it is different from the default price.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_available_in_metros_inner"
            },
            "type": "array"
          },
          "class": {
            "example": "m3.large.x86",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deployment_types": {
            "items": {
              "enum": [
                "on_demand",
                "spot_market"
              ],
              "type": "string"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "legacy": {
            "type": "boolean"
          },
          "line": {
            "enum": [
              "baremetal"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pricing": {
            "type": "object"
          },
          "slug": {
            "example": "m3.large.x86",
            "type": "string"
          },
          "specs": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_specs"
          },
          "type": {
            "description": "The plan type",
            "enum": [
              "standard",
              "workload_optimized",
              "custom"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Plan_available_in_inner": {
        "example": {
          "price": {
            "hour": 1.23
          },
          "href": "href"
        },
        "properties": {
          "href": {
            "description": "href to the Facility",
            "type": "string"
          },
          "price": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_available_in_inner_price"
          }
        },
        "type": "object"
      },
      "PortData": {
        "example": {
          "bonded": true,
          "mac": "mac"
        },
        "properties": {
          "mac": {
            "description": "MAC address is set for NetworkPort ports",
            "type": "string"
          },
          "bonded": {
            "description": "Bonded is true for NetworkPort ports in a bond and NetworkBondPort ports that are active",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Plan_available_in_metros_inner": {
        "example": {
          "price": {
            "hour": 1.23
          },
          "href": "href"
        },
        "properties": {
          "href": {
            "description": "href to the Metro",
            "type": "string"
          },
          "price": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_available_in_inner_price"
          }
        },
        "type": "object"
      },
      "IPAssignment_metro": {
        "allOf": [
          {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Metro"
          },
          {
            "description": "The metro the IP address is in",
            "type": "object"
          }
        ]
      },
      "MetroInput": {
        "properties": {
          "metro": {
            "description": "Metro code or ID of where the instance should be provisioned in.\nEither metro or facility must be provided.",
            "example": "sv",
            "type": "string"
          }
        },
        "required": [
          "metro"
        ],
        "type": "object"
      },
      "UserLite": {
        "properties": {
          "avatar_thumb_url": {
            "description": "Avatar thumbnail URL of the User",
            "type": "string"
          },
          "created_at": {
            "description": "When the user was created",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "Primary email address of the User",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the User",
            "type": "string"
          },
          "full_name": {
            "description": "Full name of the User",
            "type": "string"
          },
          "href": {
            "description": "API URL uniquely representing the User",
            "type": "string"
          },
          "id": {
            "description": "ID of the User",
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the User",
            "type": "string"
          },
          "short_id": {
            "description": "Short ID of the User",
            "type": "string"
          },
          "updated_at": {
            "description": "When the user details were last updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "short_id"
        ],
        "type": "object"
      },
      "ParentBlock": {
        "example": {
          "netmask": "netmask",
          "cidr": 5,
          "href": "href",
          "network": "network"
        },
        "properties": {
          "cidr": {
            "type": "integer"
          },
          "href": {
            "type": "string"
          },
          "netmask": {
            "type": "string"
          },
          "network": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceCreateInput": {
        "properties": {
          "always_pxe": {
            "description": "When true, devices with a `custom_ipxe` OS will always boot to iPXE. The\ndefault setting of false ensures that iPXE will be used on only the\nfirst boot.",
            "type": "boolean"
          },
          "billing_cycle": {
            "description": "The billing cycle of the device.",
            "enum": [
              "hourly",
              "daily",
              "monthly",
              "yearly"
            ],
            "type": "string"
          },
          "customdata": {
            "default": {},
            "description": "Customdata is an arbitrary JSON value that can be accessed via the\nmetadata service.",
            "type": "object"
          },
          "description": {
            "description": "Any description of the device or how it will be used. This may be used\nto inform other API consumers with project access.",
            "type": "string"
          },
          "features": {
            "description": "The features attribute allows you to optionally specify what features your server should have.\n\nIn the API shorthand syntax, all features listed are `required`:\n\n```\n{ \"features\": [\"tpm\"] }\n```\n\nAlternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:\n\n```\n{ \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } }\n```\n\nThe request will only fail if there are no available servers matching the required `tpm` criteria.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hardware_reservation_id": {
            "description": "The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.\n\nSee [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.",
            "example": "next-available",
            "type": "string"
          },
          "hostname": {
            "description": "The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.",
            "type": "string"
          },
          "ip_addresses": {
            "default": [
              {
                "address_family": 4,
                "public": true
              },
              {
                "address_family": 4,
                "public": false
              },
              {
                "address_family": 6,
                "public": true
              }
            ],
            "description": "The `ip_addresses attribute will allow you to specify the addresses you want created with your device.\n\nThe default value configures public IPv4, public IPv6, and private IPv4.\n\nPrivate IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.\n\nSome operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.\n\nFor example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.\n\nIt is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.\n\nFor example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`\n\nTo access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/DeviceCreateInput_ip_addresses_inner"
            },
            "type": "array"
          },
          "ipxe_script_url": {
            "description": "When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.\n\nSee [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.",
            "externalDocs": {
              "url": "https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/"
            },
            "type": "string"
          },
          "locked": {
            "default": false,
            "description": "Whether the device should be locked, preventing accidental deletion.",
            "type": "boolean"
          },
          "no_ssh_keys": {
            "default": false,
            "description": "Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified",
            "type": "boolean"
          },
          "operating_system": {
            "description": "The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.",
            "type": "string"
          },
          "plan": {
            "description": "The slug of the device plan to provision.",
            "example": "c3.large.x86",
            "type": "string"
          },
          "private_ipv4_subnet_size": {
            "default": 28,
            "description": "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.",
            "format": "int32",
            "type": "integer",
            "x-deprecated": true
          },
          "project_ssh_keys": {
            "description": "A list of UUIDs identifying the device parent project\nthat should be authorized to access this device (typically\nvia /root/.ssh/authorized_keys). These keys will also appear in the device metadata.\n\nIf no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted),\nall parent project keys, parent project members keys and organization members keys will be included. This behaviour can\nbe changed with 'no_ssh_keys' option to omit any SSH key being added.\n",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "public_ipv4_subnet_size": {
            "default": 31,
            "description": "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.",
            "format": "int32",
            "type": "integer",
            "x-deprecated": true
          },
          "spot_instance": {
            "description": "Create a spot instance. Spot instances are created with a maximum bid price. If the bid price is not met, the spot instance will be terminated as indicated by the `termination_time` field.",
            "type": "boolean"
          },
          "spot_price_max": {
            "description": "The maximum amount to bid for a spot instance.",
            "example": 1.23,
            "format": "float",
            "type": "number"
          },
          "ssh_keys": {
            "description": "A list of new or existing project ssh_keys\nthat should be authorized to access this device (typically\nvia /root/.ssh/authorized_keys). These keys will also\nappear in the device metadata.\n\nThese keys are added in addition to any keys defined by\n  `project_ssh_keys` and `user_ssh_keys`.\n",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/SSHKeyInput"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "termination_time": {
            "format": "date-time",
            "type": "string"
          },
          "user_ssh_keys": {
            "description": "A list of UUIDs identifying the users\nthat should be authorized to access this device (typically\nvia /root/.ssh/authorized_keys).  These keys will also\nappear in the device metadata.\n\nThe users must be members of the project or organization.\n\nIf no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted),\nall parent project keys, parent project members keys and organization members keys will be included. This behaviour can\nbe changed with 'no_ssh_keys' option to omit any SSH key being added.\n",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "userdata": {
            "description": "The userdata presented in the metadata service for this device.  Userdata is fetched and interpreted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.\n\nSee [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.",
            "externalDocs": {
              "url": "https://metal.equinix.com/developers/docs/servers/user-data/"
            },
            "type": "string"
          }
        },
        "required": [
          "operating_system",
          "plan"
        ],
        "type": "object"
      },
      "VirtualNetwork": {
        "example": {
          "vxlan": 5,
          "metal_gateways": [
            {
              "gateway_address": "10.1.2.1/27",
              "updated_at": "2000-01-23T04:56:07.000Z",
              "vlan": 1001,
              "created_at": "2000-01-23T04:56:07.000Z",
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "state": "ready"
            },
            {
              "gateway_address": "10.1.2.1/27",
              "updated_at": "2000-01-23T04:56:07.000Z",
              "vlan": 1001,
              "created_at": "2000-01-23T04:56:07.000Z",
              "href": "href",
              "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "state": "ready"
            }
          ],
          "metro_code": "metro_code",
          "instances": [
            {
              "href": "href"
            },
            {
              "href": "href"
            }
          ],
          "metro": {
            "href": "href"
          },
          "description": "description",
          "href": "href",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "facility": {
            "href": "href"
          },
          "assigned_to_virtual_circuit": true,
          "assigned_to": {
            "href": "href"
          }
        },
        "properties": {
          "assigned_to": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "assigned_to_virtual_circuit": {
            "description": "True if the virtual network is attached to a virtual circuit. False if not.",
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "facility": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "instances": {
            "description": "A list of instances with ports currently associated to this Virtual Network.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
            },
            "type": "array"
          },
          "metal_gateways": {
            "description": "A list of metal gateways currently associated to this Virtual Network.",
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/MetalGatewayLite"
            },
            "type": "array"
          },
          "metro": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Href"
          },
          "metro_code": {
            "description": "The Metro code of the metro in which this Virtual Network is defined.",
            "type": "string"
          },
          "vxlan": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BondPortData": {
        "example": {
          "name": "name",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        },
        "properties": {
          "id": {
            "description": "ID of the bonding port",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the port interface for the bond (\"bond0\")",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Address": {
        "example": {
          "country": "country",
          "address": "address",
          "address2": "address2",
          "city": "city",
          "coordinates": {
            "latitude": "latitude",
            "longitude": "longitude"
          },
          "state": "state",
          "zip_code": "zip_code"
        },
        "properties": {
          "address": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "coordinates": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Coordinates"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "country",
          "zip_code"
        ],
        "type": "object"
      },
      "FacilityInput": {
        "properties": {
          "facility": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/FacilityInput_facility"
          }
        },
        "required": [
          "facility"
        ],
        "type": "object"
      },
      "Plan_specs": {
        "example": {
          "features": {
            "txt": true,
            "uefi": true,
            "raid": true
          },
          "cpus": [
            {
              "count": 2,
              "type": "type"
            },
            {
              "count": 2,
              "type": "type"
            }
          ],
          "drives": [
            {
              "size": "3.84TB",
              "count": 7,
              "type": "HDD",
              "category": "boot"
            },
            {
              "size": "3.84TB",
              "count": 7,
              "type": "HDD",
              "category": "boot"
            }
          ],
          "nics": [
            {
              "count": 2,
              "type": "1Gbps"
            },
            {
              "count": 2,
              "type": "1Gbps"
            }
          ]
        },
        "properties": {
          "cpus": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_specs_cpus_inner"
            },
            "type": "array"
          },
          "drives": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_specs_drives_inner"
            },
            "type": "array"
          },
          "nics": {
            "items": {
              "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_specs_nics_inner"
            },
            "type": "array"
          },
          "features": {
            "$ref": "file:///home/tomk/metal-python/out.yaml#/components/schemas/Plan_specs_features"
          }
        },
        "type": "object"
      },
      "Metro": {
        "example": {
          "country": "country",
          "code": "code",
          "name": "name",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        },
        "properties": {
          "code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FacilityInput_facility": {
        "anyOf": [
          {
            "example": [
              "sv15"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "example": "any",
            "type": "string"
          }
        ],
        "description": "The datacenter where the device should be created.\n\nEither metro or facility must be provided.\n\nThe API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.\n\nAdditionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail."
      },
      "Plan_specs_features": {
        "example": {
          "txt": true,
          "uefi": true,
          "raid": true
        },
        "properties": {
          "raid": {
            "type": "boolean"
          },
          "txt": {
            "type": "boolean"
          },
          "uefi": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Plan_specs_nics_inner": {
        "example": {
          "count": 2,
          "type": "1Gbps"
        },
        "properties": {
          "count": {
            "example": 2,
            "type": "integer"
          },
          "type": {
            "enum": [
              "1Gbps",
              "10Gbps",
              "25Gbps"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Plan_specs_cpus_inner": {
        "example": {
          "count": 2,
          "type": "type"
        },
        "properties": {
          "count": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Coordinates": {
        "example": {
          "latitude": "latitude",
          "longitude": "longitude"
        },
        "properties": {
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceCreateInput_ip_addresses_inner": {
        "properties": {
          "address_family": {
            "description": "Address Family for IP Address",
            "enum": [
              4,
              6
            ],
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "cidr": {
            "description": "Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)",
            "example": 28,
            "format": "int32",
            "type": "integer"
          },
          "ip_reservations": {
            "description": "UUIDs of any IP reservations to use when assigning IPs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "public": {
            "default": true,
            "description": "Address Type for IP Address",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Plan_specs_drives_inner": {
        "example": {
          "size": "3.84TB",
          "count": 7,
          "type": "HDD",
          "category": "boot"
        },
        "properties": {
          "count": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "HDD",
              "SSD",
              "NVME"
            ],
            "type": "string"
          },
          "size": {
            "example": "3.84TB",
            "type": "string"
          },
          "category": {
            "enum": [
              "boot",
              "cache",
              "storage"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetalGatewayLite": {
        "example": {
          "gateway_address": "10.1.2.1/27",
          "updated_at": "2000-01-23T04:56:07.000Z",
          "vlan": 1001,
          "created_at": "2000-01-23T04:56:07.000Z",
          "href": "href",
          "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "state": "ready"
        },
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "gateway_address": {
            "description": "The gateway address with subnet CIDR value for this Metal Gateway. For example, a Metal Gateway using an IP reservation with block 10.1.2.0/27 would have a gateway address of 10.1.2.1/27.",
            "example": "10.1.2.1/27",
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "state": {
            "description": "The current state of the Metal Gateway. 'Ready' indicates the gateway record has been configured, but is currently not active on the network. 'Active' indicates the gateway has been configured on the network. 'Deleting' is a temporary state used to indicate that the gateway is in the process of being un-configured from the network, after which the gateway record will be deleted.",
            "enum": [
              "ready",
              "active",
              "deleting"
            ],
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "vlan": {
            "description": "The VLAN id of the Virtual Network record associated to this Metal Gateway.",
            "example": 1001,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Plan_available_in_inner_price": {
        "example": {
          "hour": 1.23
        },
        "properties": {
          "hour": {
            "example": 1.23,
            "format": "decimal",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SSHKeyInput": {
        "example": {
          "label": "label",
          "key": "key"
        },
        "properties": {
          "key": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "x_auth_token": {
        "description": "HTTP header containing the User or Project API key that will be used to authenticate the request.\n",
        "in": "header",
        "name": "X-Auth-Token",
        "type": "apiKey",
        "x-displayName": "X-Auth-Token"
      }
    }
  }
}
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.3, generator: @autorest/python@6.0.1)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from azure.core.credentials import AzureKeyCredential
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .._serialization import Deserializer, Serializer
from ._configuration import ClientConfiguration
from ._operations import ClientOperationsMixin

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Dict


class Client(
    ClientOperationsMixin
):  # pylint: disable=client-accepts-api-version-keyword
    """Introduction
    ============

    Equinix Metal provides a RESTful HTTP API which can be reached at
    https://api.equinix.com/metal/v1. This document describes the API and how to use it.

    The API allows you to programmatically interact with all
    of your Equinix Metal resources, including devices, networks, addresses, organizations,
    projects, and your user account. Every feature of the Equinix Metal web interface is accessible
    through the API.

    The API docs are generated from the Equinix Metal OpenAPI specification and are officially
    hosted at https://metal.equinix.com/developers/api.

    Common Parameters
    =================

    The Equinix Metal API uses a few methods to minimize network traffic and improve throughput.
    These parameters are not used in all API calls, but are used often enough to warrant their own
    section. Look for these parameters in the documentation for the API calls that support them.

    Pagination
    ----------

    Pagination is used to limit the number of results returned in a single request. The API will
    return a maximum of 100 results per page. To retrieve additional results, you can use the
    ``page`` and ``per_page`` query parameters.

    The ``page`` parameter is used to specify the page number. The first page is ``1``. The
    ``per_page`` parameter is used to specify the number of results per page. The maximum number of
    results differs by resource type.

    Sorting
    -------

    Where offered, the API allows you to sort results by a specific field. To sort results use the
    ``sort_by`` query parameter with the root level field name as the value. The ``sort_direction``
    parameter is used to specify the sort direction, either either ``asc`` (ascending) or ``desc``
    (descending).

    Filtering
    ---------

    Filtering is used to limit the results returned in a single request. The API supports filtering
    by certain fields in the response. To filter results, you can use the field as a query
    parameter.

    For example, to filter the IP list to only return public IPv4 addresses, you can filter by the
    ``type`` field, as in the following request:

    .. code-block:: sh

       curl -H 'X-Auth-Token: my_authentication_token' \
         https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4

    Only IP addresses with the ``type`` field set to ``public_ipv4`` will be returned.

    Searching
    ---------

    Searching is used to find matching resources using multiple field comparissons. The API
    supports searching in resources that define this behavior. The fields available for search
    differ by resource, as does the search strategy.

    To search resources you can use the ``search`` query parameter.

    Include and Exclude
    -------------------

    For resources that contain references to other resources, sucha as a Device that refers to the
    Project it resides in, the Equinix Metal API will returns ``href`` values (API links) to the
    associated resource.

    .. code-block:: json

       {
         ...
         "project": {
           "href": "/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd"
         }
       }

    If you're going need the project details, you can avoid a second API request.  Specify the
    contained ``href`` resources and collections that you'd like to have included in the response
    using the ``include`` query parameter.

    For example:

    .. code-block:: sh

       curl -H 'X-Auth-Token: my_authentication_token' \
         https://api.equinix.com/metal/v1/user?include=projects

    The ``include`` parameter is generally accepted in ``GET``\ , ``POST``\ , ``PUT``\ , and
    ``PATCH`` requests where ``href`` resources are presented.

    To have multiple resources include, use a comma-separated list (e.g.
    ``?include=emails,projects,memberships``\ ).

    .. code-block:: sh

       curl -H 'X-Auth-Token: my_authentication_token' \
         https://api.equinix.com/metal/v1/user?include=emails,projects,memberships

    You may also include nested associations up to three levels deep using dot notation (\
    ``?include=memberships.projects``\ ):

    .. code-block:: sh

       curl -H 'X-Auth-Token: my_authentication_token' \
         https://api.equinix.com/metal/v1/user?include=memberships.projects

    To exclude resources, and optimize response delivery, use the ``exclude`` query parameter. The
    ``exclude`` parameter is generally accepted in ``GET``\ , ``POST``\ , ``PUT``\ , and ``PATCH``
    requests for fields with nested object responses. When excluded, these fields will be replaced
    with an object that contains only an ``href`` field.

    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.AzureKeyCredential
    :keyword endpoint: Service URL. Default value is "https://api.equinix.com/metal/v1".
    :paramtype endpoint: str
    """

    def __init__(
        self,
        credential: AzureKeyCredential,
        *,
        endpoint: str = "https://api.equinix.com/metal/v1",
        **kwargs: Any
    ) -> None:
        self._config = ClientConfiguration(credential=credential, **kwargs)
        self._client = AsyncPipelineClient(
            base_url=endpoint, config=self._config, **kwargs
        )

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False

    def send_request(
        self, request: HttpRequest, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "Client":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)

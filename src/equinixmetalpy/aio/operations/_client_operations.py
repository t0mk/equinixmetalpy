# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.3, generator: @autorest/python@6.0.1)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._client_operations import (
    build_create_device_request,
    build_create_organization_project_request,
    build_create_organization_request,
    build_create_project_request,
    build_delete_device_request,
    build_delete_project_request,
    build_find_device_by_id_request,
    build_find_organization_projects_request,
    build_find_organizations_request,
    build_find_project_by_id_request,
    build_find_project_devices_request,
    build_find_projects_request,
    build_update_device_request,
    build_update_project_request,
)
from .._vendor import MixinABC

T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]


class ClientOperationsMixin(MixinABC):
    @distributed_trace_async
    async def delete_device(
        self, id: str, force_delete: Optional[bool] = None, **kwargs: Any
    ) -> Optional[_models.Error]:
        """Delete the device.

        Deletes a device and deprovisions it in our datacenter.

        :param id: Device UUID. Required.
        :type id: str
        :param force_delete: Force the deletion of the device, by detaching any storage volume still
         active. Default value is None.
        :type force_delete: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Error or None or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Error or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[_models.Error]]

        request = build_delete_device_request(
            id=id,
            force_delete=force_delete,
            template_url=self.delete_device.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 401, 403, 404, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_device.metadata = {"url": "/devices/{id}"}  # type: ignore

    @distributed_trace_async
    async def find_device_by_id(
        self,
        id: str,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
        **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Retrieve a device.

        Type-specific options (such as facility for baremetal devices) will be included as part of the
        main data structure.
                                 State value can be one of: active inactive queued or provisioning.

        :param id: Device UUID. Required.
        :type id: str
        :param include: Nested attributes to include. Included objects will return their full
         attributes. Attribute names can be dotted (up to 3 levels) to included deeply
         nested objects. Default value is None.
        :type include: list[str]
        :param exclude: Nested attributes to exclude. Excluded objects will return only the href
         attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply
         nested objects. Default value is None.
        :type exclude: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Device, _models.Error]]

        request = build_find_device_by_id_request(
            id=id,
            include=include,
            exclude=exclude,
            template_url=self.find_device_by_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Device", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    find_device_by_id.metadata = {"url": "/devices/{id}"}  # type: ignore

    @overload
    async def update_device(
        self,
        id: str,
        body: _models.DeviceUpdateInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Update the device.

        Updates the device.

        :param id: Device UUID. Required.
        :type id: str
        :param body: Facility to update. Required.
        :type body: ~equinixmetalpy.models.DeviceUpdateInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_device(
        self,
        id: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Update the device.

        Updates the device.

        :param id: Device UUID. Required.
        :type id: str
        :param body: Facility to update. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_device(
        self, id: str, body: Union[_models.DeviceUpdateInput, IO], **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Update the device.

        Updates the device.

        :param id: Device UUID. Required.
        :type id: str
        :param body: Facility to update. Is either a model type or a IO type. Required.
        :type body: ~equinixmetalpy.models.DeviceUpdateInput or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )  # type: Optional[str]
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Device, _models.Error]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "DeviceUpdateInput")

        request = build_update_device_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_device.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Device", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_device.metadata = {"url": "/devices/{id}"}  # type: ignore

    @distributed_trace_async
    async def find_organizations(
        self,
        personal: Optional[Union[str, "_models.Enum11"]] = None,
        without_projects: Optional[Union[str, "_models.Enum12"]] = None,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
        page: int = 1,
        per_page: int = 10,
        **kwargs: Any
    ) -> Union[_models.OrganizationList, _models.Error]:
        """Retrieve all organizations.

        Returns a list of organizations that are accessible to the current user.

        :param personal: Include, exclude or show only personal organizations. Known values are:
         "include", "exclude", and "only". Default value is None.
        :type personal: str or ~equinixmetalpy.models.Enum11
        :param without_projects: Include, exclude or show only organizations that have no projects.
         Known values are: "include", "exclude", and "only". Default value is None.
        :type without_projects: str or ~equinixmetalpy.models.Enum12
        :param include: Nested attributes to include. Included objects will return their full
         attributes. Attribute names can be dotted (up to 3 levels) to included deeply
         nested objects. Default value is None.
        :type include: list[str]
        :param exclude: Nested attributes to exclude. Excluded objects will return only the href
         attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply
         nested objects. Default value is None.
        :type exclude: list[str]
        :param page: Page to return. Default value is 1.
        :type page: int
        :param per_page: Items returned per page. Default value is 10.
        :type per_page: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: OrganizationList or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.OrganizationList or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.OrganizationList, _models.Error]]

        request = build_find_organizations_request(
            personal=personal,
            without_projects=without_projects,
            include=include,
            exclude=exclude,
            page=page,
            per_page=per_page,
            template_url=self.find_organizations.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("OrganizationList", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    find_organizations.metadata = {"url": "/organizations"}  # type: ignore

    @overload
    async def create_organization(
        self,
        body: _models.OrganizationInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Organization, _models.Error]:
        """Create an organization.

        Creates an organization.

        :param body: Organization to create. Required.
        :type body: ~equinixmetalpy.models.OrganizationInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Organization or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Organization or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_organization(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.Organization, _models.Error]:
        """Create an organization.

        Creates an organization.

        :param body: Organization to create. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Organization or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Organization or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_organization(
        self, body: Union[_models.OrganizationInput, IO], **kwargs: Any
    ) -> Union[_models.Organization, _models.Error]:
        """Create an organization.

        Creates an organization.

        :param body: Organization to create. Is either a model type or a IO type. Required.
        :type body: ~equinixmetalpy.models.OrganizationInput or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Organization or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Organization or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )  # type: Optional[str]
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Organization, _models.Error]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "OrganizationInput")

        request = build_create_organization_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_organization.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 404, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize("Organization", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_organization.metadata = {"url": "/organizations"}  # type: ignore

    @distributed_trace_async
    async def find_organization_projects(
        self,
        id: str,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
        page: int = 1,
        per_page: int = 10,
        **kwargs: Any
    ) -> Union[_models.ProjectList, _models.Error]:
        """Retrieve all projects of an organization.

        Returns a collection of projects that belong to the organization.

        :param id: Organization UUID. Required.
        :type id: str
        :param include: Nested attributes to include. Included objects will return their full
         attributes. Attribute names can be dotted (up to 3 levels) to included deeply
         nested objects. Default value is None.
        :type include: list[str]
        :param exclude: Nested attributes to exclude. Excluded objects will return only the href
         attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply
         nested objects. Default value is None.
        :type exclude: list[str]
        :param page: Page to return. Default value is 1.
        :type page: int
        :param per_page: Items returned per page. Default value is 10.
        :type per_page: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectList or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.ProjectList or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.ProjectList, _models.Error]]

        request = build_find_organization_projects_request(
            id=id,
            include=include,
            exclude=exclude,
            page=page,
            per_page=per_page,
            template_url=self.find_organization_projects.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("ProjectList", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    find_organization_projects.metadata = {"url": "/organizations/{id}/projects"}  # type: ignore

    @overload
    async def create_organization_project(
        self,
        id: str,
        body: _models.ProjectCreateInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Create a project for the organization.

        Creates a new project for the organization.

        :param id: Organization UUID. Required.
        :type id: str
        :param body: Project to create. Required.
        :type body: ~equinixmetalpy.models.ProjectCreateInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_organization_project(
        self,
        id: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Create a project for the organization.

        Creates a new project for the organization.

        :param id: Organization UUID. Required.
        :type id: str
        :param body: Project to create. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_organization_project(
        self, id: str, body: Union[_models.ProjectCreateInput, IO], **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Create a project for the organization.

        Creates a new project for the organization.

        :param id: Organization UUID. Required.
        :type id: str
        :param body: Project to create. Is either a model type or a IO type. Required.
        :type body: ~equinixmetalpy.models.ProjectCreateInput or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )  # type: Optional[str]
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Project, _models.Error]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "ProjectCreateInput")

        request = build_create_organization_project_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_organization_project.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize("Project", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_organization_project.metadata = {"url": "/organizations/{id}/projects"}  # type: ignore

    @distributed_trace_async
    async def find_projects(
        self,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
        page: int = 1,
        per_page: int = 10,
        **kwargs: Any
    ) -> Union[_models.ProjectList, _models.Error]:
        """Retrieve all projects.

        Returns a collection of projects that the current user is a member of.

        :param include: Nested attributes to include. Included objects will return their full
         attributes. Attribute names can be dotted (up to 3 levels) to included deeply
         nested objects. Default value is None.
        :type include: list[str]
        :param exclude: Nested attributes to exclude. Excluded objects will return only the href
         attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply
         nested objects. Default value is None.
        :type exclude: list[str]
        :param page: Page to return. Default value is 1.
        :type page: int
        :param per_page: Items returned per page. Default value is 10.
        :type per_page: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectList or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.ProjectList or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.ProjectList, _models.Error]]

        request = build_find_projects_request(
            include=include,
            exclude=exclude,
            page=page,
            per_page=per_page,
            template_url=self.find_projects.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("ProjectList", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    find_projects.metadata = {"url": "/projects"}  # type: ignore

    @overload
    async def create_project(
        self,
        body: _models.ProjectCreateFromRootInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Create a project.

        Creates a new project for the user default organization. If the user don't have an
        organization, a new one will be created.

        :param body: Project to create. Required.
        :type body: ~equinixmetalpy.models.ProjectCreateFromRootInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_project(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Create a project.

        Creates a new project for the user default organization. If the user don't have an
        organization, a new one will be created.

        :param body: Project to create. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_project(
        self, body: Union[_models.ProjectCreateFromRootInput, IO], **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Create a project.

        Creates a new project for the user default organization. If the user don't have an
        organization, a new one will be created.

        :param body: Project to create. Is either a model type or a IO type. Required.
        :type body: ~equinixmetalpy.models.ProjectCreateFromRootInput or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )  # type: Optional[str]
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Project, _models.Error]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "ProjectCreateFromRootInput")

        request = build_create_project_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_project.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize("Project", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_project.metadata = {"url": "/projects"}  # type: ignore

    @distributed_trace_async
    async def delete_project(self, id: str, **kwargs: Any) -> Optional[_models.Error]:
        """Delete the project.

        Deletes the project.

        :param id: Project UUID. Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Error or None or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Error or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[_models.Error]]

        request = build_delete_project_request(
            id=id,
            template_url=self.delete_project.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 401, 403, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_project.metadata = {"url": "/projects/{id}"}  # type: ignore

    @distributed_trace_async
    async def find_project_by_id(
        self,
        id: str,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
        **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Retrieve a project.

        Returns a single project if the user has access.

        :param id: Project UUID. Required.
        :type id: str
        :param include: Nested attributes to include. Included objects will return their full
         attributes. Attribute names can be dotted (up to 3 levels) to included deeply
         nested objects. Default value is None.
        :type include: list[str]
        :param exclude: Nested attributes to exclude. Excluded objects will return only the href
         attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply
         nested objects. Default value is None.
        :type exclude: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Project, _models.Error]]

        request = build_find_project_by_id_request(
            id=id,
            include=include,
            exclude=exclude,
            template_url=self.find_project_by_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Project", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    find_project_by_id.metadata = {"url": "/projects/{id}"}  # type: ignore

    @overload
    async def update_project(
        self,
        id: str,
        body: _models.ProjectUpdateInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Update the project.

        Updates the project.

        :param id: Project UUID. Required.
        :type id: str
        :param body: Project to update. Required.
        :type body: ~equinixmetalpy.models.ProjectUpdateInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_project(
        self,
        id: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Update the project.

        Updates the project.

        :param id: Project UUID. Required.
        :type id: str
        :param body: Project to update. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_project(
        self, id: str, body: Union[_models.ProjectUpdateInput, IO], **kwargs: Any
    ) -> Union[_models.Project, _models.Error]:
        """Update the project.

        Updates the project.

        :param id: Project UUID. Required.
        :type id: str
        :param body: Project to update. Is either a model type or a IO type. Required.
        :type body: ~equinixmetalpy.models.ProjectUpdateInput or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Project or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Project or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )  # type: Optional[str]
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Project, _models.Error]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "ProjectUpdateInput")

        request = build_update_project_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_project.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Project", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_project.metadata = {"url": "/projects/{id}"}  # type: ignore

    @distributed_trace_async
    async def find_project_devices(
        self,
        id: str,
        facility: Optional[str] = None,
        hostname: Optional[str] = None,
        reserved: Optional[bool] = None,
        tag: Optional[str] = None,
        type: Optional[str] = None,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
        page: int = 1,
        per_page: int = 10,
        **kwargs: Any
    ) -> Union[_models.DeviceList, _models.Error]:
        """Retrieve all devices of a project.

        Provides a collection of devices for a given project.

        :param id: Project UUID. Required.
        :type id: str
        :param facility: Filter by device facility. Default value is None.
        :type facility: str
        :param hostname: Filter by partial hostname. Default value is None.
        :type hostname: str
        :param reserved: Filter only reserved instances. Default value is None.
        :type reserved: bool
        :param tag: Filter by device tag. Default value is None.
        :type tag: str
        :param type: Filter by instance type (ondemand,spot,reserved). Default value is None.
        :type type: str
        :param include: Nested attributes to include. Included objects will return their full
         attributes. Attribute names can be dotted (up to 3 levels) to included deeply
         nested objects. Default value is None.
        :type include: list[str]
        :param exclude: Nested attributes to exclude. Excluded objects will return only the href
         attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply
         nested objects. Default value is None.
        :type exclude: list[str]
        :param page: Page to return. Default value is 1.
        :type page: int
        :param per_page: Items returned per page. Default value is 10.
        :type per_page: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeviceList or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.DeviceList or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.DeviceList, _models.Error]]

        request = build_find_project_devices_request(
            id=id,
            facility=facility,
            hostname=hostname,
            reserved=reserved,
            tag=tag,
            type=type,
            include=include,
            exclude=exclude,
            page=page,
            per_page=per_page,
            template_url=self.find_project_devices.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("DeviceList", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    find_project_devices.metadata = {"url": "/projects/{id}/devices"}  # type: ignore

    @overload
    async def create_device(
        self,
        id: str,
        body: _models.CreateDeviceRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Create a device.

        Creates a new device and provisions it in the specified location.

        Device type-specific options are accepted.  For example, ``baremetal`` devices accept
        ``operating_system``\ , ``hostname``\ , and ``plan``. These parameters may not be accepted for
        other device types. The default device type is ``baremetal``.

        :param id: Project UUID. Required.
        :type id: str
        :param body: Device to create. Required.
        :type body: ~equinixmetalpy.models.CreateDeviceRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_device(
        self,
        id: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Create a device.

        Creates a new device and provisions it in the specified location.

        Device type-specific options are accepted.  For example, ``baremetal`` devices accept
        ``operating_system``\ , ``hostname``\ , and ``plan``. These parameters may not be accepted for
        other device types. The default device type is ``baremetal``.

        :param id: Project UUID. Required.
        :type id: str
        :param body: Device to create. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_device(
        self, id: str, body: Union[_models.CreateDeviceRequest, IO], **kwargs: Any
    ) -> Union[_models.Device, _models.Error]:
        """Create a device.

        Creates a new device and provisions it in the specified location.

        Device type-specific options are accepted.  For example, ``baremetal`` devices accept
        ``operating_system``\ , ``hostname``\ , and ``plan``. These parameters may not be accepted for
        other device types. The default device type is ``baremetal``.

        :param id: Project UUID. Required.
        :type id: str
        :param body: Device to create. Is either a model type or a IO type. Required.
        :type body: ~equinixmetalpy.models.CreateDeviceRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device or Error or the result of cls(response)
        :rtype: ~equinixmetalpy.models.Device or ~equinixmetalpy.models.Error
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )  # type: Optional[str]
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType[Union[_models.Device, _models.Error]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "CreateDeviceRequest")

        request = build_create_device_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_device.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 403, 404, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize("Device", pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 403:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 404:
            deserialized = self._deserialize("Error", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("Error", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_device.metadata = {"url": "/projects/{id}/devices"}  # type: ignore
